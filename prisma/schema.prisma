// standard path for graphql (Node)
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  schemas         = ["public", "airfoil"]
}

// standard path for graphql (Node)
generator typegraphql {
  provider        = "typegraphql-prisma"
  previewFeatures = ["multiSchema"]
  schemas         = ["public", "airfoil"]
}

generator drizzle {
  provider        = "drizzle-prisma-generator"
  previewFeatures = ["multiSchema"]
  output          = "./indexers/drizzle" // Where to put generated Drizle tables
  schemas         = ["public", "airfoil"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "airfoil"]
}

model deposits_with_referral_events {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)

  timestamp Int
  referrer  String
  referee   String
  assets    String

  cursor BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
  @@schema("public")
}

model transfer_events {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  timestamp    Int
  txHash       String

  contract_address String
  from             String
  to               String
  value            Decimal @db.Decimal(30, 0)
  cursor           BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
  @@schema("public")
}

model withdraw_queue_events {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  tx_hash      String

  // Withdraw queue addresses
  queue_contract                       String
  amount                               String
  amount_lst                           String
  request_id                           BigInt
  is_claimed                           Boolean
  claim_time                           Int
  receiver                             String
  caller                               String
  cumulative_requested_amount_snapshot String

  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
  @@schema("public")
}

model ekubo_positions_events {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  tx_hash      String
  timestamp    Int

  contract_address String

  token0            String
  token1            String
  pool_fee          String
  pool_tick_spacing String
  extension         String

  position_id     String
  lower_bound     Int
  upper_bound     Int
  liquidity_delta String
  amount0_delta   String
  amount1_delta   String

  cursor            BigInt?            @map("_cursor")
  ekubo_nfts_events ekubo_nfts_events?

  @@unique([block_number, tx_index, event_index], name: "block_tx_event_idx")
  @@index([cursor])
  @@index([timestamp(sort: Desc)])
  @@schema("public")
}

model ekubo_nfts_events {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  tx_hash      String
  timestamp    Int

  from_address String
  to_address   String
  nft_id       String

  cursor BigInt? @map("_cursor")

  // have a one to one match with ekubo_positions_events
  // add relation to ekubo_positions_events
  ekubo_positions_events ekubo_positions_events? @relation(fields: [block_number, tx_index, event_index], references: [block_number, tx_index, event_index])

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
  @@index([nft_id], type: Hash)
  @@schema("public")
}

model blocks {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number Int     @unique
  timestamp    Int
  cursor       BigInt? @map("_cursor")

  @@schema("public")
}

//
// processed events
//
model withdraw_queue {
  tx_hash                              String
  // Withdraw queue addresses
  queue_contract                       String
  amount                               String
  amount_lst                           String
  request_id                           BigInt
  is_claimed                           Boolean
  claim_time                           Int
  receiver                             String
  caller                               String
  cumulative_requested_amount_snapshot String

  is_rejected Boolean @default(false) // allows us to mark some withdraws as rejected (to avoid re-reading spammy txs)

  // tracks if unstake initiation event was sent to bot
  is_notified Boolean @default(false)

  timestamp Int

  @@unique([receiver, queue_contract, request_id])
  @@schema("public")
}

model users {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  block_number     Int
  tx_index         Int     @default(0)
  event_index      Int     @default(0)
  tx_hash          String
  contract_address String
  user_address     String
  email            String?
  timestamp        Int
  cursor           BigInt? @map("_cursor")

  @@unique([user_address, contract_address])
  @@schema("public")
}

// xSTRK balances
model user_balances {
  block_number        Int
  user_address        String
  vesuAmount          String
  ekuboAmount         String
  nostraLendingAmount String
  nostraDexAmount     String
  walletAmount        String
  strkfarmAmount      String
  opusAmount          String @default("0")

  total_amount String
  date         String
  timestamp    Int

  @@unique([block_number, user_address])
  @@schema("public")
}

enum UserPointsType {
  Early
  Priority
  Bonus
  Referrer

  @@schema("public")
}

model user_points {
  block_number Int
  user_address String
  points       Decimal
  // cummulative_points Decimal // within a given type
  type         UserPointsType
  remarks      String?

  @@unique(name: "id", fields: [block_number, user_address, type])
  @@schema("public")
}

model points_aggregated {
  user_address String   @unique
  total_points BigInt
  block_number Int
  timestamp    Int
  created_on   DateTime @default(now())
  updated_on   DateTime @updatedAt

  user_allocation user_allocation? @relation(fields: [user_address], references: [user_address])

  @@schema("public")
}

model user_allocation {
  user_address      String             @unique
  allocation        String
  proof             String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  points_aggregated points_aggregated?

  @@schema("public")
}

model price_info {
  block_number Int     @unique
  dex_price    Decimal @db.Decimal(30, 18)
  true_price   Decimal @db.Decimal(30, 18)
  timestamp    Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([block_number])
  @@schema("public")
}

model dex_positions {
  // e.g. nostra
  // ekubo_fee_tick_spacing
  pool_key          String
  user_address      String
  strk_amount       String
  score             Decimal
  is_points_settled Boolean @default(false) // indicates if the points for this position have been settled

  // to store any additional info
  additional_info String @default("{}")

  block_number Int
  timestamp    Int

  @@unique(name: "id", fields: [user_address, pool_key, timestamp])
  @@schema("public")
}

model ekubo_position_timeseries {
  id String @id @default(uuid())

  // Position info (nft_id and position_id are the same)
  position_id String

  // Pool info
  pool_fee          String?
  pool_tick_spacing String?
  extension         String?

  // Position bounds (null when NFT is minted but position not yet created)
  lower_bound Int?
  upper_bound Int?

  // Final calculated values (accumulated from deltas)
  liquidity String? // Final liquidity value (cannot be negative)
  amount0   String? // Final amount0 value (can be negative)
  amount1   String? // Final amount1 value (can be negative)

  // Owner info
  owner_address String

  // Timing info
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  timestamp    Int
  txHash       String

  // Record type
  record_type String // "nft_mint", "nft_transfer", "position_created", "position_updated"

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([position_id])
  @@index([owner_address])
  @@index([timestamp(sort: Desc)])
  @@index([block_number(sort: Desc), tx_index(sort: Desc), event_index(sort: Desc)], name: "block_tx_event_idx")
  @@schema("public")
}
