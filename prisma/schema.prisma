// standard path for graphql (Node)
generator client {
  provider = "prisma-client-js"
}

// standard path for graphql (Node)
generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model deposits {
  block_number Int
  tx_index     Int @default(0)
  event_index  Int @default(0)

  timestamp Int
  sender    String
  owner     String
  assets    String
  shares    String
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model deposits_with_referral {
  block_number Int
  tx_index     Int @default(0)
  event_index  Int @default(0)

  timestamp Int
  referrer  String
  referee   String
  assets    String

  cursor BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model transfer {
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  timestamp    Int
  txHash       String

  from   String
  to     String
  value  Decimal @db.Decimal(30, 0)
  cursor BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model withdraw_queue {
  block_number Int
  tx_index     Int    @default(0)
  event_index  Int    @default(0)
  tx_hash      String

  caller                               String
  amount_strk                          String
  amount_kstrk                         String
  request_id                           BigInt
  is_claimed                           Boolean
  claim_time                           Int
  receiver                             String
  cumulative_requested_amount_snapshot String
  is_rejected                          Boolean @default(false) // allows us to mark some withdraws as rejected (to avoid re-reading spammy txs)

  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model received_funds {
  block_number Int
  tx_index     Int     @default(0)
  event_index  Int     @default(0)
  amount       String
  sender       String
  unprocessed  String
  intransit    String
  timestamp    Int
  cursor       BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model dispatch_to_stake {
  block_number Int
  tx_index     Int     @default(0)
  event_index  Int     @default(0)
  delegator    String
  amount       String
  cursor       BigInt? @map("_cursor")
  timestamp    String // Not emitted in the actual event

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model dispatch_to_withdraw_queue {
  block_number Int
  tx_index     Int     @default(0)
  event_index  Int     @default(0)
  amount       String
  cursor       BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model unstake_action {
  block_number Int
  tx_index     Int     @default(0)
  event_index  Int     @default(0)
  amount       String
  cursor       BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model unstake_intent_started {
  block_number Int
  tx_index     Int     @default(0)
  event_index  Int     @default(0)
  amount       String
  cursor       BigInt? @map("_cursor")

  @@unique([block_number, tx_index, event_index])
  @@index([cursor])
}

model users {
  block_number Int
  tx_index     Int     @default(0)
  event_index  Int     @default(0)
  tx_hash      String
  user_address String  @unique
  timestamp    Int
  cursor       BigInt? @map("_cursor")
}

// xSTRK balances
model user_balances {
  block_number        Int
  user_address        String
  vesuAmount          String
  ekuboAmount         String
  nostraLendingAmount String
  nostraDexAmount     String
  walletAmount        String
  strkfarmAmount      String
  opusAmount          String @default("0")

  total_amount String
  date         String
  timestamp    Int

  @@unique([block_number, user_address])
}

enum UserPointsType {
  Early
  Priority
  Bonus
  Referrer
}

model user_points {
  block_number Int
  user_address String
  points       Decimal
  // cummulative_points Decimal // within a given type
  type         UserPointsType
  remarks      String?

  @@unique(name: "id", fields: [block_number, user_address, type])
}

model points_aggregated {
  user_address String   @unique
  total_points BigInt
  block_number Int
  timestamp    Int
  created_on   DateTime @default(now())
  updated_on   DateTime @updatedAt

  user_allocation user_allocation? @relation(fields: [user_address], references: [user_address])
}

model user_allocation {
  user_address      String             @unique
  allocation        String
  proof             String?
  merkle_root       String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  points_aggregated points_aggregated?
}

model blocks {
  block_number Int     @unique
  timestamp    Int
  cursor       BigInt? @map("_cursor")
}

model price_info {
  block_number Int     @unique
  dex_price    Decimal @db.Decimal(30, 18)
  true_price   Decimal @db.Decimal(30, 18)
  timestamp    Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([block_number])
}

model dex_positions {
  // e.g. nostra
  // ekubo_fee_tick_spacing
  pool_key          String
  user_address      String
  strk_amount       String
  score             Decimal
  is_points_settled Boolean @default(false) // indicates if the points for this position have been settled

  // to store any additional info
  additional_info String @default("{}")

  block_number Int
  timestamp    Int

  @@unique(name: "id", fields: [user_address, pool_key, timestamp])
}
